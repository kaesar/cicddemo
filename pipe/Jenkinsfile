pipeline {
    agent any
    tools { 
        nodejs "nodejs"
        //dockerTool "docker"
    }
    environment {
        PATH = "/opt/homebrew/bin:${env.PATH}"
        //PATH = "/usr/local/bin:${env.PATH}"
    }
    options {
        skipDefaultCheckout(true)
    }
    stages {
        stage('Checkout/Clone') {
            steps {
                cleanWs()
                //checkout scm
                sh '''
                git --version
                curl --version
                node -v
                git clone https://github.com/kaesar/cicddemo.git
                '''
            }
        }
        stage('Build NodeJS Code') {
            steps {
                dir('cicddemo') {
                    sh '''
                    npm install
                    npm run build
                    '''
                }
            }
        }
        stage('Unit Tests NodeJS') {
            steps {
                dir('cicddemo') {
                    sh '''
                    npx jest --coverage --coverageReporters="json"
                    '''
                }
            }
        }
        /*stage('Test Coverage %') {
            steps {
                script {
                    def coverageReport = readFile('cicddemo/coverage/coverage-summary.json')
                    def json = new groovy.json.JsonSlurper().parseText(coverageReport)
                    def coveragePercentage = json.total.lines.pct
        
                    echo "Coverage Percentage: $coveragePercentage%"
                }
            }
        }*/
        stage('Check/Build Docker Image') {
            steps {
                dir('cicddemo') {
                    sh '''
                    docker --version
                    docker build -t cicddemo:v1 .
                    '''
                    //script {
                    //    def dockerImage = docker.build('cicddemo:v1', '.')
                    //}
                }
            }
        }
        stage('Prepare IaC with Terraform') {
            steps {
                dir('cicddemo/iac') {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'AWS_CREDENTIALS_TF',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                        terraform -version
                        terraform init
                        terraform validate
                        terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }
        stage('Apply IaC - Deploy AWS') {
            steps {
                dir('cicddemo/iac') {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'AWS_CREDENTIALS_TF',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                        terraform apply -auto-approve tfplan
                        '''
                    }
                }
            }
        }
    }
    /*post {  // Cleanup
        always {
            dir('cicddemo/iac') {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'AWS_CREDENTIALS_TF',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                    sh 'terraform destroy -f'
                }
            }
        }
    }*/
}
